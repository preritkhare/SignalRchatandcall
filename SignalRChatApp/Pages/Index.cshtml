@page
@model IndexModel
@{
    ViewData["Title"] = "ChatApp";
}

<div class="card">
    <div class="card-header">
        <div class="col-4">
            <div class="input-group float-right">
                <input type="text" id="username" class="form-control" placeholder="Your name...">
            </div>
        </div>
    </div>
    <div class="card-body chat-messages" id="chatBox"></div>
    <div class="card-footer">
        <div class="input-group">
            <input type="text" id="message" class="form-control" placeholder="Type your message...">
            <div class="input-group-append">
                <button class="btn btn-primary" id="sendButton">Send</button>
            </div>
        </div>
        <div>
            <button class="btn btn-success" id="callButton">Call User</button>
            <video id="localVideo" autoplay muted style="width: 300px; height: 200px;"></video>
            <video id="remoteVideo" autoplay style="width: 300px; height: 200px;"></video>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft.signalr/3.1.7/signalr.min.js"></script>
<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
    var localStream;
    var remoteStream;
    var peerConnection;

    const configuration = {
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' } // You can add more STUN/TURN servers
        ]
    };

    async function startLocalStream() {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        document.getElementById('localVideo').srcObject = localStream;
    }

    async function callUser(userId) {
        peerConnection = new RTCPeerConnection(configuration);
        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

        peerConnection.onicecandidate = event => {
            if (event.candidate) {
                connection.invoke("SendIceCandidate", userId, {
                    Candidate: event.candidate.candidate,
                    SdpMid: event.candidate.sdpMid,
                    SdpMLineIndex: event.candidate.sdpMLineIndex
                });
            }
        };

        peerConnection.ontrack = event => {
            remoteStream = event.streams[0];
            document.getElementById('remoteVideo').srcObject = remoteStream;
        };

        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        connection.invoke("CallUser", userId, {
            Type: offer.type,
            Sdp: offer.sdp
        });
    }

    connection.on("ReceiveCall", async (callerId, offer) => {
        const answer = confirm("Incoming call. Accept?");
        if (answer) {
            await startLocalStream();
            peerConnection = new RTCPeerConnection(configuration);
            localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

            peerConnection.onicecandidate = event => {
                if (event.candidate) {
                    connection.invoke("SendIceCandidate", callerId, {
                        Candidate: event.candidate.candidate,
                        SdpMid: event.candidate.sdpMid,
                        SdpMLineIndex: event.candidate.sdpMLineIndex
                    });
                }
            };

            peerConnection.ontrack = event => {
                remoteStream = event.streams[0];
                document.getElementById('remoteVideo').srcObject = remoteStream;
            };

            await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
            const answerOffer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answerOffer);
            connection.invoke("AnswerCall", callerId, {
                Type: answerOffer.type,
                Sdp: answerOffer.sdp
            });
        }
    });

    connection.on("CallAnswered", async (callerId, answer) => {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    connection.on("ReceiveIceCandidate", (candidate) => {
        peerConnection.addIceCandidate(new RTCIceCandidate({
            candidate: candidate.Candidate,
            sdpMid: candidate.SdpMid,
            sdpMLineIndex: candidate.SdpMLineIndex
        }));
    });

    connection.start().then(function () {
        console.log("Connected!");
        startLocalStream();
    }).catch(function (err) {
        console.error(err.toString());
    });

    connection.on("ReceiveMessage", function (user, message) {
        var encodedUser = $("<div />").text(user).html();
        var encodedMsg = $("<div />").text(message).html();
        $("#chatBox").append("<p><strong>" + encodedUser + "</strong>: " + encodedMsg + "</p>");
    });

    $("#sendButton").click(function () {
        var user = $("#username").val();
        if (user.trim() === "") {
            alert("Enter your name first.");
        } else {
            var message = $("#message").val();
            connection.invoke("SendMessage", user, message);
            $("#message").val("").focus();
        }
    });

    $("#callButton").click(function () {
        var userToCall = prompt("Enter the username of the user you want to call:");
        if (userToCall) {
            callUser(userToCall);
        }
    });
</script>
